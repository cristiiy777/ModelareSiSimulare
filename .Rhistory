hist(dnorm(hist(rnorm(100, 0.1)))))
hist(dnorm(hist(rnorm(100, 0.1)), 0, 1))
nr1 = hist(rnorm(1000, 0.1))
hist(dnorm(nr1, 0, 1))
nr1 = hist(rnorm(1000, 0.1))
hist(dnorm(nr1, 0, 1))
nr1 = hist(rnorm(1000, 0.1))
hist(dnorm(nr1, 0, 1))
hist(rnorm(n = 100, mean = 0, sd = 1))
hist(rnorm(n = 500, mean = 0, sd = 1))
hist(rnorm(n = 1000, mean = 0, sd = 1))
hist(rnorm(n = 5000, mean = 0, sd = 1))
hist(rnorm(n = 10000, mean = 0, sd = 1))
hist(rnorm(n = 100000, mean = 0, sd = 1))
hist(rnorm(n = 1000000, mean = 0, sd = 1))
#Linear Congruential Generator
#parameters for LCG
a0 = 1013904223
a1 = 1664525
m = 2^32
x0 = 2576389
n = 1000000
lcg = function(a0, a1, m, x0, n) #linear congruential generator (LCG)
{
x = rep(0,n+1)  # rep(x, times) or replicate (x, length.out) – replicate the values in x  (how many times
#or the length of replicate
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (a0 + (a1 * x[i-1])) %% m
}
return(x)
}
r = lcg(a0, a1, m, x0, n)
r
#Linear Congruential Generator
#parameters for LCG
a0 = 1013904223
a1 = 1664525
m = 2^32
x0 = 2576389
n = 1000
lcg = function(a0, a1, m, x0, n) #linear congruential generator (LCG)
{
x = rep(0,n+1)  # rep(x, times) or replicate (x, length.out) – replicate the values in x  (how many times
#or the length of replicate
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (a0 + (a1 * x[i-1])) %% m
}
return(x)
}
r = lcg(a0, a1, m, x0, n)
r
plot(x)
plot(r)
hist(r)
lines(r)
plot(r)
barplot(r)
lcg = function(a0, a1, m, x0, n) #linear congruential generator (LCG)
{
x = rep(0,n+1)  # rep(x, times) or replicate (x, length.out) – replicate the values in x  (how many times
#or the length of replicate
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (a0 + (a1 * x[i-1])) %% m
}
return(x)
}
r = lcg(a0, a1, m, x0, n)
r
lcg = function(a0, a1, m, x0, n) #linear congruential generator (LCG)
{
x = rep(0,n+1)  # rep(x, times) or replicate (x, length.out) – replicate the values in x  (how many times
#or the length of replicate
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (a0 + (a1 * x[i-1])) %% m
}
return(x)
}
r = lcg(a0, a1, m, x0, n)
r
lcg = function(a0, a1, m, x0, n) #linear congruential generator (LCG)
{
x = rep(0,n+1)  # rep(x, times) or replicate (x, length.out) – replicate the values in x  (how many times
#or the length of replicate
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (a0 + (a1 * x[i-1])) %% m
}
return(x)
}
r = lcg(a0, a1, m, x0, n)
r
lcg = function(a0, a1, m, x0, n) #linear congruential generator (LCG)
{
x = rep(0,n+1)  # rep(x, times) or replicate (x, length.out) – replicate the values in x  (how many times
#or the length of replicate
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (a0 + (a1 * x[i-1])) %% m
}
return(x)
}
lcg_1 = lcg(a0 = 1467945236, a1 = 2698231, m = 2^32 , x0 = 2768923, n = 1000)
lcg_1
lcg = function(a0, a1, m, x0, n) #linear congruential generator (LCG)
{
x = rep(0,n+1)  # rep(x, times) or replicate (x, length.out) – replicate the values in x  (how many times
#or the length of replicate
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (a0 + (a1 * x[i-1])) %% m
}
return(x)
}
lcg_1 = lcg(a0 = 1467945236, a1 = 2698231, m = 2^32 , x0 = 2768923, n = 1000)
lcg_1
lcg_2 = lcg(a0 = 2467891211, a1 = 3579842, m = 2^29 , x0 = 4567742, n = 1500)
lcg_2
#parameters for MCG
a1 = 27
m = 256
x0 = 201
n = 71
mcg = function(a1, m, x0, n)
{
x = rep(0,n+1)
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (a1 * x[i-1]) %% m
}
return(x)
}
r = mcg(a1, m, x0, n)
r
mcg_1 = mcg(a1 = 176, m = 255, x0 = 301, n = 300)
mcg_1
mcg_2 = mcg(a1 = 27, m = 256, x0 = 201, n = 300)
mcg_2
mcg_2 = mcg(a1 = 27, m = 256, x0 = 201, n = 300)
mcg_2
mcg = function(a1, m, x0, n)
{
x = rep(0,n+1)
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (a1 * x[i-1]) %% m
}
return(x)
}
mcg_1 = mcg(a1 = 261, m = 155, x0 = 91, n = 500)
mcg_1
mcg_2 = mcg(a1 = 27, m = 256, x0 = 201, n = 300)
b = rep(0, n+1)
mcg = function(a1, m, x0, n)
{
x = rep(0,n+1)
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (a1 * x[i-1]) %% m
}
return(x)
}
mcg_1 = mcg(a1 = 261, m = 155, x0 = 91, n = 500)
mcg_1
mcg_2 = mcg(a1 = 2, m = 31, x0 = 187, n = 300)
mcg_2
mcg_2 = mcg(a1 = 233, m = 31, x0 = 187, n = 300)
mcg_2
mcg_2 = mcg(a1 = 233, m = 121, x0 = 187, n = 300)
mcg_2
mcg_1 = mcg(a1 = 261, m = 155, x0 = 91, n = 700)
mcg_1
mcg_2 = mcg(a1 = 233, m = 121, x0 = 187, n = 500)
mcg_2
#RANDU (a special case of MCG)
randu = function(x0, n)
{
x = rep(0,n+1)
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (65539 * x[i-1]) %% (2^31)
}
return(x[-1])
}
randu(2,20)
randu_2 <- randu(2,20)
randu_2
randu = function(x0, n)
{
x = rep(0,n+1)
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (65539 * x[i-1]) %% (2^31)
}
return(x[-1])
}
randu_1 <- randu(2,700)
randu_1
randu_1 <- randu(233,700)
randu_1
randu = function(x0, n)
{
x = rep(0,n+1)
x[1] = x0
for(i in 1:n+1)
{
if(i == 1)
x[i] = x0
else
x[i] = (567313 * x[i-1]) %% (2^37)
}
return(x[-1])
}
randu_2 <- randu(16,800)
randu_2
barplot(lcg_1)
barplot(lcg_2)
mcg_1
barplot(mcg_1)
barplot(mcg_2)
barplot(randu_1)
barplot(randu_2)
hist(lcg_1)
hist(lcg_2)
hist(mcg_1)
hist(mcg_2)
hist(randu_1)
hist(randu_2)
lcg_2 <- cg(a0 =  2467891211, a1 = 3579842, m = 2^31 , x0 = 4567742, n = 800)
lcg_2
barplot(lcg_2)
hist(lcg_2)
lcg_2 <- cg(a0 =  2467891211, a1 = 3579842, m = 2^32 , x0 = 4567742, n = 800)
lcg_2
lcg_2 <- cg(a0 =  1972891241, a1 = 2579842, m = 2^32 , x0 = 3567742, n = 800)
lcg_2
lcg_2 <- cg(a0 =  1972891241, a1 = 2579842, m = 2^32 , x0 = 3567742, n = 800)
lcg_2
hist(lcg_2)
barplot(lcg_2)
barplot(lcg_1)
hist(randu_1)
hist(randu_2)
lcg_2 <- lcg(a0 =  1972891241, a1 = 2579842, m = 2^32 , x0 = 3567742, n = 800)
lcg_2
barplot(lcg_1)
barplot(lcg_2)
hist(lcg_2)
lcg_2 <- lcg(a0 = 1972891241, a1 = 2579842, m = 2^32 , x0 = 3567742, n = 400)
lcg_2
lcg_1 <- lcg(a0 = 1467945236, a1 = 2698231, m = 2^32 , x0 = 2768923, n = 500)
lcg_1
lcg_2 <- lcg(a0 = 1972891241, a1 = 2579842, m = 2^32 , x0 = 3567742, n = 400)
lcg_2
barplot(lcg_1)
barplot(lcg_2)
hist(lcg_1)
hist(lcg_2)
hist(randu_1)
hist(randu_2)
ptestg(lcg_1, method = c("Fisher", "robust", "extended", "extendedRobust",
"FisherRSR"), multiple = FALSE)
periodicity(lcg_1, ...)
acf(randu_1)
ks.test(lcg_1,'punif')
chisq.unif.test(lcg_1)
acf(lcg_1)
acf(lcg_1)
acf(lcg_2)
acf(mcg_1)
acf(mcg_2)
acf(randu_1)
acf(randu_2)
acf(mcg_1)
chisq.unif.test(u)chisq.unif.test(u)
x <- rexp(n=100, rate=1)
x
x <- rexp(n=100, rate=0.5)
x
curve(x)
curve(rexp(n=100, rate=0.5))
curve(x, rexp(n=100, rate=0.5))
curve(rexp(x))
curve(pexp(x, 0.5), col = 'blue')
x <- rexp(n=100, rate=0.5)
curve(rexp(x))
x <- rexp(n=100, rate=1)
curve(rexp(x))
x <- rexp(n=100, rate=2)
curve(rexp(x))
x <- rexp(n=100, rate=10)
curve(rexp(x))
x <- rexp(n=100, rate=10)
curve(rexp(x))
curve(dgamma(x, shape = 1, scale = 2))
x <- rgamma(n=100, shape = 1, scale = 2)
curve(rgamma(x))
x <- rgamma(n=100, scale = 2, shape = 1)
curve(rgamma(x))
x <- rgamma(n=10, scale=1, shape=0.4)
curve(rgamma(x))
x <- rgamma(n=10, scale=1, shape=0.4)
curve(rgamma(x, scale=1, shape=0.4))
x <- rgamma(n=10, shape= 1, scale = 2)
curve(rgamma(x, shape = 1, scale = 2))
curve(dt(x, 10), lwd=3, col= "blue")
curve(dt(x=10, 10), lwd=3, col= "blue")
x <- dt(100, 10)
x
x <- dt(100, 10)
curve(dt(x, 10), lwd=3, col= "blue")
curve(qt(.975,x), from = 2 , to = 100, ylab = "Quantile 0.975 ", xlab = "Degrees of freedom", main = "Student t distribution")
abline(h=qnorm(.975), col = 2)
curve(qt(.975,x), from = 2 , to = 10, ylab = "Quantile 0.975 ", xlab = "Degrees of freedom", main = "Student t distribution")
abline(h=qnorm(.975), col = 2)
curve(qt(.975,x), from = 2 , to = 5, ylab = "Quantile 0.975 ", xlab = "Degrees of freedom", main = "Student t distribution")
abline(h=qnorm(.975), col = 2)
curve(qt(.975,x), from = 2 , to = 5, ylab = "Quantile 0.975 ", xlab = "Degrees of freedom", main = "Student t distribution")
abline(h=qnorm(.975), col = 2)
curve(qt(.975,x), from = 2 , to = 2, ylab = "Quantile 0.975 ", xlab = "Degrees of freedom", main = "Student t distribution")
abline(h=qnorm(.975), col = 2)
curve(qt(.975,x), from = 2 , to = 1, ylab = "Quantile 0.975 ", xlab = "Degrees of freedom", main = "Student t distribution")
abline(h=qnorm(.975), col = 2)
curve(dt(x, 2), lwd=3, col= "blue")
directory  <- "C:/Users/Lenovo/Desktop/ModelareSiSimulare"
fisierNorm <- file.path(directory, "Norm.t.data_.csv")
norm
directory  <- "C:/Users/Lenovo/Desktop/ModelareSiSimulare"
fisierNorm <- file.path(directory, "Norm.t.data_.csv")
norm       <- read.csv(file = fisierDeer, header = TRUE)
norm
norm
directory  <- "C:/Users/Lenovo/Desktop/ModelareSiSimulare"
fisierNorm <- file.path(directory, "Norm.t.data_.csv")
normT       <- read.csv(file = fisierDeer, header = TRUE)
normT
directory  <- "C:/Users/Lenovo/Desktop/ModelareSiSimulare"
fisierNorm <- file.path(directory, "Norm.t.data_.csv")
norm       <- read.csv(file = fisierNorm, header = TRUE)
norm
hist(norm$Process1)
hist(norm$Process2)
hist(norm$Process1)
ecdf(norm)
ecdf(norm$Process1)
plot(ecdf(norm$Process1))
plot(ecdf(norm$Process1))
plot(ecdf(norm$Process2))
plot(ecdf(norm$Process2))
plot(ecdf(norm$Process1))
plot(ecdf(norm$Process1))
plot(ecdf(norm$Process2))
ks.test(norm$Process1, norm$Process2)
plot(ks.test(norm$Process1, norm$Process2))
plot(norm$Process1, norm$Process2, type="l",col="red")
plot(norm$Process1, , type="l",col="red")
plot(norm$Process1, type="l",col="red")
plot(norm$Process1, type="l",col="red")
ks.test(norm$Process1, norm$Process2)
plot(ecdf(norm$Process1), ecdf(norm$Process2) type="l",col="red")
plot(ecdf(norm$Process1), ecdf(norm$Process2), type="l",col="red")
plot(ecdf(norm$Process1), type="l",col="red")
plot(ecdf(norm$Process1), ,type="l",col="red")
plot(ecdf(norm$Process1),type="l",col="red")
plot(norm$Process1,type="l",col="red")
plot(norm$Process1, norm$Process2 ,type="l",col="red")
plot(ecdf(norm$Process1))
plot(ecdf(norm$Process2))
ks.test(norm$Process1, norm$Process2)
eruption.lm = lm(eruptions ~ waiting, data=faithful)
eruption.lm
coeffs = coefficients(eruption.lm); coeffs
coeffs = coefficients(eruption.lm)
coeffs
waiting = 80           # the waiting time
duration = coeffs[1] + coeffs[2]*waiting
duration
newdata = data.frame(waiting=80) # wrap the parameter
#Then we apply the predict function to eruption.lm along with newdata.
predict(eruption.lm, newdata)    # apply predict
eruption.lm = lm(eruptions ~ waiting, data=faithful)
#Then we extract the coefficient of determination from the r.squared attribute of its summary.
summary(eruption.lm)$r.squared
eruption.lm = lm(eruptions ~ waiting, data=faithful)
#Then we print out the F-statistics of the significance test with the summary function.
summary(eruption.lm)
#We apply the lm function to a formula that describes the variable eruptions
#by the variable waiting, and save the linear regression model in a
#new variable eruption.lm. Then we compute the residual with the resid function.
eruption.lm = lm(eruptions ~ waiting, data=faithful)
eruption.res = resid(eruption.lm)
#We now plot the residual against the observed values of the variable waiting.
plot(faithful$waiting, eruption.res,
+     ylab="Residuals", xlab="Waiting Time",
+     main="Old Faithful Eruptions")
abline(0, 0)                  # the horizon
#Assume that the error term ϵ in the simple linear regression
#model is independent of x, and is normally distributed, with
#zero mean and constant variance. For a given value of x,
#the interval estimate of the dependent variable y is called the
#prediction interval.
#In the data set faithful, develop a 95% prediction interval of
#the eruption duration for the waiting time of 80 minutes.
#We apply the lm function to a formula that describes the
#variable eruptions by the variable waiting, and save the
#liniar regression model in a new variable eruption.lm.
attach(faithful)     # attach the data frame
eruption.lm = lm(eruptions ~ waiting)
#Then we create a new data frame that set the waiting time value.
newdata = data.frame(waiting=80)
#We now apply the predict function and set the predictor variable
#in the newdata argument. We also set the interval type as "predict", and use the default 0.95 confidence level.
predict(eruption.lm, newdata, interval="predict")
plot(faithful$waiting, eruption.res, ylab="Residuals", xlab="Waiting Time", main="Old Faithful Eruptions")
abline(0, 0)                  # the horizon
qqnorm(eruption.stdres, ylab="Standardized Residuals", xlab="Normal Scores", main="Old Faithful Eruptions")
qqline(eruption.stdres)
eruption.lm = lm(eruptions ~ waiting, data=faithful)
eruption.stdres = rstandard(eruption.lm)
#We now create the normal probability plot with the qqnorm function,
#and add the qqline for further comparison.
qqnorm(eruption.stdres, ylab="Standardized Residuals", xlab="Normal Scores", main="Old Faithful Eruptions")
qqline(eruption.stdres)
cars
plot(cars$speed)
plot(cars$dist)
boxplot(cars$speed)
boxplot(cars$dist)
density(cars$speed)
density(cars$dist)
density(cars$speed)
viteza   <- cars$speed
distanta <- cars$dist
cor(distanta, viteza)
plot(cars$speed)
scatter.smooth(cars$speed)
scatter.smooth(cars$dist)
linearMod <- lm(dist ~ speed, data=cars)  # build linear regression model on full data
linearMod
boxplot(cars$speed)
summary(modelLiniar)
modelLiniar <- lm(dist ~ speed, data=cars) #model de regresie liniara
summary(modelLiniar)
summary(modelLiniar)
AIC(modelLiniar)  # AIC => 419.1569
BIC(modelLiniar)  # BIC => 424.8929
scatter.smooth(cars$speed)
set.seed(100)  # setting seed to reproduce results of random sampling
trainingRowIndex <- sample(1:nrow(cars), 0.8*nrow(cars))  # row indices for training data
trainingData <- cars[trainingRowIndex, ]  # model training data
testData  <- cars[-trainingRowIndex, ]   # test data
testData
lmMod <- lm(dist ~ speed, data=trainingData)  # build the model
distPred <- predict(lmMod, testData)  # predict distance
distPred
summary (lmMod)  # model summary
actuals_preds <- data.frame(cbind(actuals=testData$dist, predicteds=distPred))  # make actuals_predicteds dataframe.
correlation_accuracy <- cor(actuals_preds)  # 82.7%
head(actuals_preds)
scatter.smooth(actuals_preds)
actuals_preds
